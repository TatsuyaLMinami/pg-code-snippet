{
  "选项式vue": {
    "prefix": "vue-sfc",
    "body": [
      "<template>",
      "  <div>",
      "    ${1}",
      "  </div>",
      "</template>",
      "",
      "<script setup>",
      "import { reactive, toRefs, ref, onMounted, nextTick, defineEmits, defineProps, defineExpose, watch } from 'vue'",
      "const props = defineProps({ })",
      "const emit = defineEmits([])",
      "defineExpose({ })",
      "onMounted(() => {",
      "  ${0}",
      "})",
      "</script>",
      "<style lang=\"scss\" scoped>",
      "</style>",
      ""
    ],
    "description": "选项式vue"
  },
  "组合式vue": {
    "prefix": "vue-composition",
    "body": [
      "<template>",
      "  <div>",
      "    ${1}",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "import { defineComponent, reactive, toRefs, onMounted, computed, nextTick, ref } from 'vue'",
      "export default defineComponent({",
      "  name: '',",
      "  components: {},",
      "  props: [],",
      "  emits: [],",
      "  setup(props, context) {",
      "    const data = reactive({",
      "      ${2}",
      "    })",
      "    onMounted(() => {",
      "      ${0}",
      "    })",
      "    return {",
      "      ...toRefs(data)",
      "    }",
      "  }",
      "})",
      "</script>",
      "<style lang=\"scss\" scoped>",
      "</style>",
      ""
    ],
    "description": "组合式vue"
  },
  "gl-table": {
    "prefix": "gl-table",
    "body": [
      "<gl-table",
      "  :operators=\"tableData.operators\"",
      "  :headers=\"tableData.headers\"",
      "  :data=\"tableData.list\"",
      "  :page=\"tableData.page\"",
      "  @pageChange=\"handlePageChange\"",
      "  @cellFun=\"handleCell\"",
      "/>"
    ],
    "description": "gl-table"
  },
  "gl-drawer": {
    "prefix": "gl-drawer",
    "body": [
      "<gl-drawer",
      "  ref=\"drawerRef\"",
      "  :title=\"title\"",
      "  direction=\"rtl\"",
      "  v-model=\"visible\"",
      "  size=\"30%\"",
      "  :destroy-on-close=\"true\"",
      "  :before-close=\"handleClose\"",
      ">",
      "  <template #content>",
      "    ${0}",
      "  </template>",
      "</gl-drawer>"
    ],
    "description": "gl-drawer"
  },
  "el-form": {
    "prefix": "gl-form",
    "body": [
      "<el-form",
      "  ref=\"formRef\"",
      "  :model=\"form\"",
      "  label-width=\"120px\"",
      "  :rules=\"rules\">",
      "   ${0}",
      "</el-form>"
    ],
    "description": "el-form"
  },
  "gl-tree": {
    "prefix": "gl-tree",
    "body": [
      "<gl-tree",
      "  ref=\"treeRef\"",
      "  :search=\"true\"",
      "  :data=\"treeData\"",
      "  :defaultExpandedKeys=\"['0']\"",
      "  :expand-on-click-node=\"false\"",
      "  :props=\"treeProps\"",
      "  :highlight-current=\"true\"",
      "  @node-click=\"clickTree\"",
      "  node-key=\"id\"",
      "/>"
    ],
    "description": "gl-tree"
  },
  "gl-card": {
    "prefix": "gl-card",
    "body": [
      "<gl-card",
      "  shadow=\"always\"",
      "  :is-popover=\"true\"",
      "  :alt=\"name\"",
      ">",
      "  <template #header>",
      "    ${1}",
      "  </template>",
      "  <template #operate>",
      "    ${0}",
      "  </template>",
      "</gl-card>"
    ],
    "description": "gl-card"
  },
  "gl-page": {
    "prefix": "gl-page",
    "body": ["<gl-page", "  :page=\"page\"", "  @change=\"change\"", "/>"],
    "description": "gl-page"
  },
  "gl-upload": {
    "prefix": "gl-upload",
    "body": [
      "<gl-upload",
      "  :limit=\"10\"",
      "  :title=\"title\"",
      "  ref=\"uploadRef\"",
      "  :fileTypeArr=\"fileType\"",
      "  :multiple=\"true\"",
      "  :showFileList=\"true\"",
      "  :httpRequest=\"httpRequest\"",
      "  :importHeaders=\"importHeaders\"",
      "  @onError=\"onError\"",
      "  @onExceed=\"onExceed\"",
      "  @beforeUpload=\"beforeUpload\"",
      ">",
      "  <template #top>",
      "    ${0}",
      "  </template>",
      "</gl-upload>"
    ],
    "description": "gl-upload"
  },
  "gl-dialog": {
    "prefix": "gl-dialog",
    "body": [
      "<gl-dialog",
      "  :title=\"title\"",
      "  v-model=\"visible\"",
      "  width=\"30%\"",
      "  :show-close=\"true\"",
      "  :before-close=\"handleClose\"",
      "  :destroy-on-close=\"true\"",
      ">",
      "  <template #content>",
      "    ${1}",
      "  </template>",
      "  <template #footer>",
      "    ${0}",
      "  </template>",
      "</gl-dialog>"
    ],
    "description": "gl-dialog"
  },
  "动态表单dynamicForm": {
    "prefix": "gl-dynamic-form",
    "body": [
      "<DynamicForm",
      "  ref=\"dynamicRef\"",
      "  :modelValue=\"formData\"",
      "  :inParams=\"inParams\"",
      ">",
      "  <template #operationButtons>",
      "    <gl-button type=\"primary\" sort=\"submit\" @click=\"submit\" />",
      "    <gl-button @click=\"reset\" sort=\"reset\" />",
      "  </template>",
      "</DynamicForm>"
    ],
    "description": "动态表单dynamicForm"
  },
  "动态表单项dynamicFormItem": {
    "prefix": "gl-dynamic-form-item",
    "body": [
      "<DynamicFormItem",
      "  v-model=\"formData[item.key]\"",
      "  :itemObj=\"item\"",
      "  contentWidth=\"100%\"",
      "/>"
    ],
    "description": "动态表单项dynamicFormItem"
  },
  "左侧树右侧列表布局": {
    "prefix": "gl-layout-left-tree-right-list",
    "body": [
      "<template>",
      "  <div class=\"listPage\" :class=\"`padding-${_document.padding}`\">",
      "    <div class=\"gl-wrapper\">",
      "      <el-aside :width=\"asideWidth\">",
      "        <gl-tree",
      "          class=\"tree\"",
      "          ref=\"treeRef\"",
      "          :search=\"true\"",
      "          :data=\"treeData\"",
      "          :defaultExpandedKeys=\"['0']\"",
      "          :expand-on-click-node=\"false\"",
      "          :props=\"treeProps\"",
      "          :highlight-current=\"true\"",
      "          @node-click=\"clickTree\"",
      "          node-key=\"id\"",
      "        >",
      "          <template #treeButtons=\"{ node, data }\">",
      "            <gl-button @click.stop=\"addNode(data)\">",
      "              <i class=\"iconfont icon-zeng\" />",
      "            </gl-button>",
      "            <gl-button @click.stop=\"editNode(data)\">",
      "              <i class=\"iconfont icon-edit_two\" />",
      "            </gl-button>",
      "            <gl-button :popConfirm=\"true\" popTitle=\"确认删除当前节点？\" @confirm=\"delNode(data)\">",
      "              <i class=\"iconfont icon-group_del\" />",
      "            </gl-button>",
      "          </template>",
      "        </gl-tree>",
      "      </el-aside>",
      "      <gl-dragDash v-model=\"asideWidth\" :minWidth=\"230\" />",
      "      <el-main>",
      "        <el-form class=\"form\" :v-model=\"formData\" :inline=\"true\">",
      "          <gl-button type=\"primary\" sort=\"add\" @click=\"add\" />",
      "          <gl-button @click=\"del\">删除</gl-button>",
      "          <el-form-item>",
      "            <gl-select v-model=\"formData.selectString\" :options=\"selectOptions\" @change=\"changeValue\" placeholder=\"请选择\" />",
      "          </el-form-item>",
      "          <el-form-item>",
      "            <gl-input v-model=\"formData.inputString\" clearable @change=\"changeValue\" placeholder=\"请输入\">",
      "              <template #suffix>",
      "                <i class=\"iconfont icon-sousuo1\" />",
      "              </template>",
      "            </gl-input>",
      "          </el-form-item>",
      "        </el-form>",
      "        <gl-table",
      "          :selectable=\"true\"",
      "          :operators=\"tableData.operators\"",
      "          :headers=\"tableData.headers\"",
      "          :data=\"tableData.list\"",
      "          :page=\"tableData.page\"",
      "          @pageChange=\"changePage\"",
      "          @cellFun=\"clickCell\"",
      "          @selection-change=\"changeSelection\"",
      "        />",
      "      </el-main>",
      "    </div>",
      "  </div>",
      "</template>",
      "<script setup>",
      "import { useStore } from 'vuex'",
      "import { reactive, computed, toRefs, ref, onMounted, nextTick, defineEmits, defineProps, defineExpose, watch } from 'vue'",
      "const props = defineProps({})",
      "const emit = defineEmits([])",
      "const store = useStore()",
      "const treeRef = ref()",
      "const formData = reactive({})",
      "const treeData = reactive([",
      "  {",
      "    label: '全部',",
      "    id: '0',",
      "    children: [",
      "      { label: '节点1', id: '1', children: [] },",
      "      { label: '节点2', id: '2', children: [] },",
      "      { label: '节点3', id: '3', children: [] }",
      "    ]",
      "  }",
      "])",
      "const selectOptions = reactive([",
      "  { label: '值1', value: 1 },",
      "  { label: '值2', value: 2 },",
      "  { label: '值3', value: 3 }",
      "])",
      "const asideWidth = ref('230px')",
      "const _document = computed(() => store.state.setting.document)",
      "const treeProps = ref({",
      "  children: 'children',",
      "  label: 'label'",
      "})",
      "const tableData = reactive({",
      "  headers: [",
      "    { prop: 'name', label: '名称', needTip: true },",
      "    { prop: 'type', label: '类型', needTip: true },",
      "    { prop: 'date', label: '时间', needTip: true }",
      "  ],",
      "  list: [",
      "    { name: '名称1', type: '类型1', date: '时间1' },",
      "    { name: '名称2', type: '类型2', date: '时间2' },",
      "    { name: '名称3', type: '类型3', date: '时间3' }",
      "  ],",
      "  operators: [",
      "    {",
      "      name: 'edit',",
      "      sort: 'edit'",
      "    },",
      "    {",
      "      name: 'delete',",
      "      sort: 'delete',",
      "      popConfirm: true,",
      "      popTitle: '确定删除此数据?'",
      "    }",
      "  ],",
      "  page: { current: 1, size: 20, total: 3 }",
      "})",
      "const add = () => {",
      "  //",
      "}",
      "const del = () => {",
      "  //",
      "}",
      "const addNode = (val) => {",
      "  console.log(val)",
      "}",
      "const editNode = (val) => {",
      "  console.log(val)",
      "}",
      "const delNode = (val) => {",
      "  console.log(val)",
      "}",
      "const changeValue = (val) => {",
      "  console.log(val)",
      "}",
      "const clickTree = (val) => {",
      "  console.log(val)",
      "}",
      "const clickCell = (val) => {",
      "  console.log(val)",
      "}",
      "const changeSelection = (val) => {",
      "  console.log(val)",
      "}",
      "const changePage = (val) => {",
      "  console.log(val)",
      "}",
      "defineExpose({})",
      "onMounted(() => {",
      "  //",
      "})",
      "</script>",
      "<style lang=\"scss\" scoped>",
      ".listPage {",
      "  height: 100%;",
      "  .gl-wrapper {",
      "    height: 100%;",
      "    display: flex;",
      "    .tree {",
      "      padding: 20px;",
      "      height: 100%;",
      "      width: 100%;",
      "    }",
      "    .form {",
      "      height: 36px;",
      "      margin-bottom: 20px;",
      "      .el-form-item {",
      "        :deep(.el-input__inner) {",
      "          width: 188px;",
      "          height: 32px;",
      "        }",
      "        height: 32px;",
      "        float: right;",
      "        margin-left: 10px;",
      "        margin-bottom: 0px;",
      "      }",
      "    }",
      "  }",
      "}",
      "</style>",
      ""
    ],
    "description": "左侧树右侧列表布局"
  },
  "打印": {
    "prefix": "log",
    "body": "console.log('$1')",
    "description": "打印"
  },
  "引入": {
    "prefix": "import",
    "body": "import {$1} from '$0'",
    "description": "引入"
  },
  "箭头函数": {
    "prefix": "function",
    "body": ["const $1 = ($2) => {", "  $0", "}"],
    "description": "箭头函数"
  },
  "if": {
    "prefix": "if",
    "body": ["if ($1) {", "  $2", "}"]
  },
  "else if": {
    "prefix": "elseif",
    "body": ["else if ($1) {", "  $2", "}"]
  },
  "else": {
    "prefix": "else",
    "body": ["else {", "  $2", "}"]
  },
  "map": {
    "prefix": "map",
    "body": ["$1.map((item, idx) => {", "  $2", "  return $3", "})"]
  },
  "forEach": {
    "prefix": "forEach",
    "body": ["$1.forEach((item, idx) => {", "  $2", "})"]
  },
  "find": {
    "prefix": "find",
    "body": ["const $1 = $2.find(item => $3)"]
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch($1) {",
      "  case $2:",
      "    return $3",
      "  case $4:",
      "    return $5",
      "  case $6:",
      "    return $7",
      "  case $8:",
      "    return $9",
      "  default:",
      "    return null",
      "}"
    ]
  },
  "const": {
    "prefix": "const",
    "body": ["const $1 = $2"]
  },
  "let": {
    "prefix": "let",
    "body": ["let $1 = $2"]
  }
}
